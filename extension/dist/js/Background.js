(()=>{"use strict";const e="localhost:3000",t="POST";function n(){return new Promise(((e,t)=>{chrome.storage.local.get("student_name",(n=>{n.student_name?e(n.student_name):(console.error(n),t("Name retrieval failed"))}))}))}chrome.runtime.onInstalled.addListener((function(){chrome.declarativeContent.onPageChanged.removeRules(void 0,(function(){chrome.declarativeContent.onPageChanged.addRules([{conditions:[new chrome.declarativeContent.PageStateMatcher({pageUrl:{hostEquals:"classroom.google.com"}})],actions:[new chrome.declarativeContent.ShowPageAction]}])}))})),chrome.runtime.onMessage.addListener((function(o,a,i){switch(console.log("Received a message from "+(a.tab?a.tab.url:"extension")),o.type){case"AddActiveQuestion":!async function(o,a){a(await async function(o,a,i){let c={mode:"cors",cache:"no-cache",headers:{"Content-Type":"application/json"}};c.method=t;try{let t=await n();c.body=JSON.stringify({student_name:t,videoID:o,timestamp:a,question_text:i});let s=await fetch(`http://${e}/video/addActiveQuestion`,c);return await s.json()}catch(e){return console.error(e),{status:!1}}}(o.videoID,o.timestamp,o.questionText))}(o,i);break;case"FinishVideo":!async function(o,a){a(await async function(o,a){let i={mode:"cors",cache:"no-cache",headers:{"Content-Type":"application/json"}};i.method=t;try{let t=await n();i.body=JSON.stringify({student_name:t,videoID:o,increment:a});let c=await fetch(`http://${e}/student/finishVideo`,i);return await c.json()}catch(e){return console.error(e),{status:!1}}}(o.videoID,o.increment))}(o,i);break;default:i({status:!1})}return!0}))})();